#define  $stdnames lookup(`rho:registry:lookup`), insertArbitrary(`rho:registry:insertArbitrary`), stdout(`rho:io:stdout`), ack, return
#define  $stdout stdout(`rho:io:stdout`)
#define  $define($name,$value) stdout!(["#define " ++ $name, $value])
#define  $trace trace(`rho:io:stderr`)
#define  $insertArbitrary insertArbitrary(`rho:registry:insertArbitrary`)
#define  $lookup lookup(`rho:registry:lookup`)
#define   $mylockerStore($key,$value) new $stdout, $lookup, nonce , ret in {   lookup!($locker_##$myusername, *ret) |   for (locker <- ret) {      locker!("update", $myprivkey.hexToBytes(),$locker_nonce_##$myusername, {$key: $value}, *stdout, *ret)     for (_ <- ret) {        stdout!(["#define $locker_nonce_" ++ $myusername, $locker_nonce_##$myusername + 1])      }   } }
#define  $test_value "xyzzy"
#define   $mylockerGet($ret) new $stdout, $lookup, nonce , lockerCh in {   lookup!($locker_%%$myusername, *lockerCh) |   for (locker <- lockerCh) {       locker!("get", $myprivkey.hexToBytes(),$locker_nonce_%%$myusername,  *stdout, *$ret) |      stdout!(["#define $locker_nonce_" ++ $myusername, {$locker_nonce_%%$myusername + 1}])    } }
#define   $mylockerUpdate($key,$value) new $stdout, $lookup, nonce , lockerCh, ret in {   lookup!($locker_%%$myusername, *lockerCh) |   for (locker <- lockerCh) {       locker!("update", $myprivkey.hexToBytes(),$locker_nonce_%%$myusername, { $key: $value},  *stdout, *ret) |      stdout!(["#define $locker_nonce_" ++ $myusername, {$locker_nonce_%%$myusername + 1}])    } }
#define  $add($x,$y)  ($x + $y)
#define  $newinbox new inboxCh, capabilities, ret, $stdout, $lookup, $insertArbitrary in {   lookup!($Inbox, *inboxCh) |   for (inbox <- inboxCh) {     inbox!(*capabilities) |     for (receive, send, peek <- capabilities) {       lookup!($locker_%%$myusername, *ret) |       for (locker <- ret) {         stdout!(["#define $locker_nonce_" ++ $myusername, $locker_nonce_%%$myusername + 1]) |         locker!("update", $myprivkey.hexToBytes(),$locker_nonce_%%$myusername, {"inbox": *send, "receive": *receive, "peek": *peek}, *stdout, *ret) |         for (_ <- ret) {           insertArbitrary!(*send,*ret)|           for (uri <- ret) {             stdout!(["#define $inbox_" ++ $myusername, *uri])           }         }       }     }   } }
#define  $hi new $stdnames, say in {    say!("Rho World")   |   contract say(@val) = {     stdout!("Hello, "++ val ++"!")   } }
#define  $lasteval #include "lasteval"
#define  $newDirectory($name) new ret, uriCh, itemsCh, lookup(`rho:registry:lookup`), stdout(`rho:io:stdout`) in {   lookup!($locker_%%$myusername, *uriCh) | for(locker <- uriCh) {     locker!("get", $myprivkey.hexToBytes(), $locker_nonce_%%$myusername, *stdout, *itemsCh) |     for (@items <- itemsCh) {       if ( items.get("inbox") == Nil ) {         stdout!("you do not have an inbox")       } else {         lookup!($Directory,*uriCh) |         for( Dir <- uriCh ) {           Dir!(*ret) |           for ( map <- ret ) {            @{items.get("inbox")}!(["directory", $name, *map],*stdout) |            /* stdout!(*map) | */            stdout!( $name ++ " created")          } }         } |         stdout!(["#define $locker_nonce_" ++ $myusername, {$locker_nonce_%%$myusername + 1}])       } } }
#define  $add2Directory($name, $key,$value,$ret) new ret, $stdout in {   $peek("directory",$name,*ret) | for (@[dir, ..._] <- ret ) {     @{dir.get("write")}!($key,$value,$ret)  } }
#define  $newBallot($name,$choiceSet) new lookupCh, bCh, $lookup, $stdout in {   lookup!($Ballot, *lookupCh) |   for(Ballot <- lookupCh) {     Ballot!($choiceSet, *bCh) |     for (admin, tally <- bCh) {       $send($myusername, "ballot", $name,  {"admin": *admin, "tally": *tally}) } } }
#define  $voteresults($ballot) new ret, $stdout in {   $peek("ballot",$ballot,*ret) |   for ( @[{"tally": results, ..._}, ..._] <- ret ) {     @results!(*stdout)   } }
#define  $chat($user,$message) $send($user,"chat",$myusername,$message)
#define  $updateinbox new inboxCh, capabilities, ret, $stdout, $lookup, $insertArbitrary in {   lookup!($Inbox, *inboxCh) |   for (inbox <- inboxCh) {     inbox!(*capabilities) |     for (receive, send, peek <- capabilities) {       $peek(*inboxCh) |       for (oldmail <- inboxCh) {         stdout!(["saving oldmail: ",*oldmail]) |         send!(*oldmail) |         lookup!($locker_%%$myusername, *ret) |         for (locker <- ret) {           stdout!(["#define $locker_nonce_" ++ $myusername, $locker_nonce_%%$myusername + 2]) |           locker!("update", $myprivkey.hexToBytes(),$locker_nonce_%%$myusername + 1,             {"inbox": *send, "receive": *receive, "peek": *peek}, *stdout, *ret) |           for (_ <- ret) {             insertArbitrary!(*send,*ret)|             for (uri <- ret) {               stdout!(["#define $inbox_" ++ $myusername, *uri])             }           }         }       }     }   } }
#define  $double($x) 2*$x
#define  $this that"~~"the "~~"other
#define  $stdnames lookup(`rho:registry:lookup`), insertArbitrary(`rho:registry:insertArbitrary`), stdout(`rho:io:stdout`), ack, return
#define  $stdout stdout(`rho:io:stdout`)
#define  $define($name,$value) stdout!(["#define " ++ $name, $value])
#define  $trace trace(`rho:io:stderr`)
#define  $insertArbitrary insertArbitrary(`rho:registry:insertArbitrary`)
#define  $lookup lookup(`rho:registry:lookup`)
#define   $mylockerStore($key,$value) new $stdout, $lookup, nonce , ret in {   lookup!($locker_##$myusername, *ret) |   for (locker <- ret) {      locker!("update", $myprivkey.hexToBytes(),$locker_nonce_##$myusername, {$key: $value}, *stdout, *ret)     for (_ <- ret) {        stdout!(["#define $locker_nonce_" ++ $myusername, $locker_nonce_##$myusername + 1])      }   } }
#define  $test_value "xyzzy"
#define   $mylockerGet($ret) new $stdout, $lookup, nonce , lockerCh in {   lookup!($locker_%%$myusername, *lockerCh) |   for (locker <- lockerCh) {       locker!("get", $myprivkey.hexToBytes(),$locker_nonce_%%$myusername,  *stdout, *$ret) |      stdout!(["#define $locker_nonce_" ++ $myusername, {$locker_nonce_%%$myusername + 1}])    } }
#define   $mylockerUpdate($key,$value) new $stdout, $lookup, nonce , lockerCh, ret in {   lookup!($locker_%%$myusername, *lockerCh) |   for (locker <- lockerCh) {       locker!("update", $myprivkey.hexToBytes(),$locker_nonce_%%$myusername, { $key: $value},  *stdout, *ret) |      stdout!(["#define $locker_nonce_" ++ $myusername, {$locker_nonce_%%$myusername + 1}])    } }
#define  $add($x,$y)  ($x + $y)
#define  $newinbox new inboxCh, capabilities, ret, $stdout, $lookup, $insertArbitrary in {   lookup!($Inbox, *inboxCh) |   for (inbox <- inboxCh) {     inbox!(*capabilities) |     for (receive, send, peek <- capabilities) {       lookup!($locker_%%$myusername, *ret) |       for (locker <- ret) {         stdout!(["#define $locker_nonce_" ++ $myusername, $locker_nonce_%%$myusername + 1]) |         locker!("update", $myprivkey.hexToBytes(),$locker_nonce_%%$myusername, {"inbox": *send, "receive": *receive, "peek": *peek}, *stdout, *ret) |         for (_ <- ret) {           insertArbitrary!(*send,*ret)|           for (uri <- ret) {             stdout!(["#define $inbox_" ++ $myusername, *uri])           }         }       }     }   } }
#define $locker_nonce_Valentine 3
#define $locker_nonce_Germany 5
#define  $hi new $stdnames, say in {    say!("Rho World")   |   contract say(@val) = {     stdout!("Hello, "++ val ++"!")   } }
#define  $lasteval #include "lasteval"
#define  $newDirectory($name) new ret, uriCh, itemsCh, lookup(`rho:registry:lookup`), stdout(`rho:io:stdout`) in {   lookup!($locker_%%$myusername, *uriCh) | for(locker <- uriCh) {     locker!("get", $myprivkey.hexToBytes(), $locker_nonce_%%$myusername, *stdout, *itemsCh) |     for (@items  <- itemsCh) {       if ( items.get("inbox") == Nil ) {         stdout!("you do not have an inbox")       } else {         lookup!($Directory,*uriCh) |         for( Dir <- uriCh ) {           Dir!(*ret) |           for ( map  <- ret )  {            @{items.get("inbox")}!(["directory", $name, *map],*stdout) |            /* stdout!(*map) | */            stdout!( $name ++ " created")          } }         } |         stdout!(["#define $locker_nonce_" ++ $myusername, {$locker_nonce_%%$myusername + 1}])       } } }
#define  $add2Directory($name, $key,$value,$ret) new ret, $stdout in {   $peek("directory",$name,*ret) | for (@[dir, ..._] <- ret ) {     @{dir.get("write")}!($key,$value,$ret)  } }
#define  $newBallot($name,$choiceSet) new lookupCh, bCh, $lookup, $stdout in {   lookup!($Ballot, *lookupCh) |   for(Ballot <- lookupCh) {     Ballot!($choiceSet, *bCh) |     for (admin, tally <- bCh) {       $send($myusername, "ballot", $name,  {"admin": *admin, "tally": *tally}) } } }
#define  $voteresults($ballot) new ret, $stdout in {   $peek("ballot",$ballot,*ret) |   for ( @[{"tally": results, ..._}, ..._] <- ret ) {     @results!(*stdout)   } }
#define  $chat($user,$message) $send($user,"chat",$myusername,$message)
#define  $updateinbox new inboxCh, capabilities, ret, $stdout, $lookup, $insertArbitrary in {   lookup!($Inbox, *inboxCh) |   for (inbox <- inboxCh) {     inbox!(*capabilities) |     for (receive, send, peek <- capabilities) {       $peek(*inboxCh) |       for (oldmail <- inboxCh) {         stdout!(["saving oldmail: ",*oldmail]) |         send!(*oldmail) |         lookup!($locker_%%$myusername, *ret) |         for (locker <- ret) {           stdout!(["#define $locker_nonce_" ++ $myusername, $locker_nonce_%%$myusername + 2]) |           locker!("update", $myprivkey.hexToBytes(),$locker_nonce_%%$myusername + 1,             {"inbox": *send, "receive": *receive, "peek": *peek}, *stdout, *ret) |           for (_ <- ret) {             insertArbitrary!(*send,*ret)|             for (uri <- ret) {               stdout!(["#define $inbox_" ++ $myusername, *uri])             }           }         }       }     }   } }
#define  $double($x) 2*$x
#define  $this that"~~"the "~~"other
#define  $makemylocker new lookupCh, stdout(`rho:io:stdout`),"~~"      lookup(`rho:registry:lookup`), insert(`rho:registry:insertArbitrary`), insCh in {"~~"  lookup!($Locker, *lookupCh) |"~~"  for(Locker <- lookupCh) {"~~"    stdout!(["found Locker",*Locker]) |"~~"    new capabilities, ret, inboxCh, lockerCh, uriCh in {"~~"      Locker!($mypubkey.hexToBytes(), *lockerCh) | for(locker <- lockerCh) {"~~"stdout!("made Locker") |"~~"        insert!(*locker, *uriCh) | for (@uri <- uriCh) {"~~"          stdout!(["#define $locker_" ++ $myusername, uri])"~~"        } |"~~"        lookup!($Inbox, *inboxCh) |"~~"        for (inbox <- inboxCh) {"~~"          inbox!(*capabilities) |"~~"          for (receive, send, peek <- capabilities) {"~~"            stdout!(["#define $locker_nonce_" ++ $myusername, 1]) |"~~"            locker!("update", $myprivkey.hexToBytes(),0, {"inbox": *send, "receive": *receive, "peek": *peek}, *stdout, *ret) |"~~"            for (_ <- ret) {"~~"              insert!(*send,*ret)|"~~"              for (uri <- ret) {"~~"                stdout!(["#define $inbox_" ++ $myusername, *uri])"~~"              }"~~"            }"~~"          }"~~"        }"~~"      }"~~"    }"~~"  }"~~"}
#define  $foreach($collection,$code) new $stdout, _loop in {"~~"contract _loop ( @_map ) = {"~~"  match  _map {"~~"    {} => Nil"~~"    { _key: _value, ..._tail } => {"~~"      $code |"~~"      _loop!(_tail)"~~"    }"~~"    []  => Nil"~~"    [_value, ..._tail] /\ _key => {"~~"      $code |"~~"      _loop!(_tail)"~~"    }"~~"    Set() => Nil"~~"    Set(_value, ..._tail) /\ _key => {"~~"      $code |"~~"      _loop!(_tail)"~~"    }"~~"    /* _ /\ _name => {for ( @collection <- @_name ) { _loop!(collection) } } */"~~"  }"~~"} | _loop!( $collection )"~~"}
#define  $receive($type,$subtype_return...) new lockerCh, itemsCh, $stdout, $lookup in {"~~"  lookup!($locker_%%$myusername, *lockerCh) | for(locker <- lockerCh) {"~~"    locker!("get", $myprivkey.hexToBytes(), $locker_nonce_%%$myusername, *stdout, *itemsCh) |"~~"    for (@items  <- itemsCh) {"~~"      if ( items.get("receive") == Nil ) {"~~"        stdout!("you do not have a receive channel for your inbox")"~~"      } else {"~~"        @{items.get("receive")}!($type, $subtype_return)"~~"      } |"~~"      stdout!(["#define $locker_nonce_" ++ $myusername, {$locker_nonce_%%$myusername + 1}])"~~"} } }
#define  $send($user, $list...) new $stdout, $lookup, ret in {"~~"  lookup!($inbox_%%$user, *ret) |"~~"  for ( inbox <- ret ) {"~~"    inbox!([$list], *stdout)"~~"   }"~~"}
#define  $addUser($username,$directory) new ret, ret1, lookup(`rho:registry:lookup`), stdout(`rho:io:stdout`) in {"~~"  lookup!($locker_%%$myusername, *ret) | for(locker <- ret) {"~~"    locker!("get", $myprivkey.hexToBytes(), $locker_nonce_%%$myusername, *stdout, *ret) |"~~"    for (@items  <- ret) {"~~"      /* stdout!(items) | */"~~"      if ( items.get("peek") == Nil ) {"~~"        stdout!("you do not have an mailbox")"~~"      } else {"~~"        stdout!("finding " ++ $directory ++ " in inbox of " ++ $myusername) |"~~"        @{items.get("peek")}!("directory", $directory,*ret) |"~~"        for ( @[{"read": *read, "write": *write, "grant": grant, ..._ }, ..._] <- ret ) {"~~"          if ( *write == Nil ) {"~~"            stdout!("you do not have permission to write to " ++ $directory)"~~"          } else {"~~"            lookup!($inbox_%%$username,*ret) |"~~"            @grant!($username, *ret1) |"~~"            for( inbox <- ret; changekey <- ret1 ) {"~~"              stdout!("adding " ++ $username) |"~~"              write!($username,*inbox, *stdout) |"~~"              inbox!(["directory", $directory,"~~"                {"read": *read, "changekey": *changekey}], *stdout)"~~"            }"~~"          }"~~"      } } |"~~"      stdout!(["#define $locker_nonce_" ++ $myusername, {$locker_nonce_%%$myusername + 1}])"~~"} } }
#define $locker_nonce_tgrospic 5
#define  $share($username, $type, $subtype)  new return in {"~~"  $peek($type, $subtype, *return) |"~~"  for ( @[*list] <- return) {"~~"    $send($username, $type, $subtype, *list)"~~"  }"~~"}
#define  $mylocker2($code)  new lockerCh, itemsCh, $stdout, $lookup in {"~~"  lookup!($locker_%%$myusername, *lockerCh) |"~~"  for(_mylocker <- lockerCh) {"~~"     _mylocker!("get", $myprivkey.hexToBytes(), $locker_nonce_%%$myusername, *stdout, *itemsCh) |"~~"     stdout!(["#define $locker_nonce_" ++ $myusername, {$locker_nonce_%%$myusername + 1}]) |"~~"     for (@_locker <- itemsCh) {"~~"     match _locker {"~~"       {"peek": *_peek, "receive": *_receive, "inbox": *_inbox} => {"~~"         $code"~~"       }"~~"       _ => stdout!(["error: mailbox not found in locker.",_locker])"~~"     }"~~"} } }
#define  $mylocker($code)  new lockerCh, itemsCh, $stdout, $lookup in {"~~"  lookup!($locker_%%$myusername, *lockerCh) |"~~"  for(_mylocker <- lockerCh) {"~~"     _mylocker!("get", $myprivkey.hexToBytes(), $locker_nonce_%%$myusername, *stdout, *itemsCh) |"~~"     stdout!(["#define $locker_nonce_" ++ $myusername, {$locker_nonce_%%$myusername + 1}]) |"~~"     for (@_locker <- itemsCh) {"~~"     match _locker {"~~"       {"peek": *_peek, "receive": *_receive, "inbox": *_inbox} => {"~~"         $code"~~"       }"~~"       _ => stdout!(["error: mailbox not found in locker.",_locker])"~~"     }"~~"} } }
#define  $peek($types_return...) $mylocker("~~"        _peek!($types_return)"~~")
#define  $readchat $receive("chat",*stdout)
#define  $print($expression) new $stdout in {stdout!($expression)}
#define   $at($timespec,$code) new $stdout in {   $send("dummyuser","event:", $_messageid,  $code) |"~~"  stdout!(["event:", "at:", $timespec,  $_messageid])"~~"}
#define   $readDir($name, $arg_ret...)  new _ret, $stdout in {   $peek("directory",$name,*_ret) |"~~"  for (@[dir] <- _ret ) {"~~"    @{dir.get("read")}!($arg_ret) "~~"  }}
#define   $readDirectory($name, $arg_ret...)  new _ret, $stdout in {   $peek("directory",$name,*_ret) |"~~"  for (@[dir, ..._] <- _ret ) {"~~"    @{dir.get("read")}!($arg_ret) "~~"  }}
#define  $for($name,$channel,$code) new $name in {"~~"  for ( $name <- $channel  ) {"~~"    $code"~~"} }
#define  $new($list...) new $list in
#define  $code($args...) $args
#define    $arg($args...) $%%"code"($args)
#define  $doForever("timespec", $code)  at: $timespec, $arg($code|$at($timespec,$code|$at($timespec,$code)))
#define  $doForever("timespec", $code)  at: $timespec, $arg($code|$at($timespec,i$arg($code|$at($timespec,$code))))
#define  $doForever("timespec", $code)  at: $timespec, $arg($code|$at($timespec,$code|$at($timespec,$code)))
#define  $doForever("timespec", $code)  at: $timespec, $arg($code|$at($timespec,$code|))
#define  $doForever("timespec", $code)  $at( $timespec, $arg($code|$at($timespec,$code|)))
#define $locker_nonce_yao 1
#define  $allowtovote($user,$ballot) new ret in {     $peek("ballot",$ballot,*ret) |"~~"  for ( @[{"admin": admin, ..._}, ..._] <- ret ) {"~~"        @admin!("giveRightToVote", $user, *ret) |"~~"    for (@vote <- ret) {"~~"            $send($user,"vote", $ballot, vote)    "~~"    }}"~~"}
#define  $newCommunity($name) new $stdout, $lookup, ret, ret2 in {"~~" lookup!($Community,*ret)|"~~" lookup!($inbox_%%$myusername,*ret2)|"~~" for ( C <- ret; box <- ret2) {"~~"  C!("new",$name, *box, *ret)|"~~"   for (caps <- ret) {"~~"    if ( *caps != Nil ) {"~~"     box!(["Community",$name,*caps],*stdout)"~~"   } else { stdout!("newCommunity " ++ $name ++ " failed")"~~"   }"~~"}}}
#define   $addmember($community,$user)  new $stdout, $lookup, ret, boxCh, ack in {   $peek("Community",$community,*ret )|"~~"  lookup!($inbox_%%$user,*boxCh)|"~~"  for ( @[{"admin": *admin, "read": *read, "write": *write, "grant": *grant}] <- ret; box <- boxCh ) {"~~"    stdout!("adding user")|"~~"    admin!("add user", $user, *box, *ret) |"~~"    for (selfmod <- ret ) {"~~"       stdout!("user added") |"~~"      box!(["member",$community,{"read": *read, "selfmod": *selfmod}],*stdout)"~~"    }}}
#define  $membersOf($community,$return) new $stdout, ret in { "~~" $peek("member",$community, *ret)|for ( @[caps] <- ret) {"~~"  @{caps.get("read")}! ($return)"~~"}}
#define  $allowalltovote($community,$ballot) new lockerCh, ret, ret1, ret2, ret3, loop, $stdout, $lookup in {     lookup!($locker_%%$myusername, *lockerCh) |"~~"  for(locker <- lockerCh) {"~~"        locker!("get", $myprivkey.hexToBytes(), $locker_nonce_%%$myusername, *stdout, *ret) |"~~"    for (@items  <- ret) {"~~"            @{items.get("peek")}!("member", $community, *ret) |"~~"      @{items.get("peek")}!("ballot", $ballot, *ret1) |"~~"      for ( @[{"read": *read, ..._}, ..._] <- ret;  @[{"admin": *admin, ..._}, ..._] <- ret1 ) {"~~"        stdout!("adding users") |"~~"        contract loop ( @map ) = {"~~"          match  map {"~~"              {} => Nil"~~"             {  username: {"inbox": *inbox, "delegate": delegate, ..._}, ...tail } => {"~~"                  stdout!(["user",username]) |"~~"                  admin!("giveRightToVote", username, *ret2) |"~~"                 for (@vote <- ret2) {"~~"stdout!([username, "added"]) |"~~"                      inbox!(["vote", $ballot, vote], *stdout) |"~~"                      @vote!("delegate",delegate, *stdout)"~~"                 }|"~~"                 loop!(tail)"~~"             }"~~"             somethingelse => stdout!(["somethingelse", somethingelse])"~~"          }"~~"        }|"~~"        read!(*ret3) |"~~"        for ( @members <- ret3 ) {"~~"                 stdout!(["keys",members.keys()]) |"~~"                 loop!(members)"~~"      }} |"~~"      stdout!(["#define $locker_nonce_" ++ $myusername, {$locker_nonce_%%$myusername + 1}])"~~"    }}"~~"}
#define $locker_nonce_aviation_hacker 16
#define  $vote($ballot,$vote) new ret, lockerCh, itemsCh, lookup(`rho:registry:lookup`), stdout(`rho:io:stdout`) in {     lookup!($locker_%%$myusername, *lockerCh) |"~~"  for(locker <- lockerCh) {"~~"        locker!("get", $myprivkey.hexToBytes(), $locker_nonce_%%$myusername, *stdout, *itemsCh) |"~~"    for (@items  <- itemsCh) {"~~"            if ( items.get("peek") == Nil ) {"~~"                stdout!("you do not have a peek channel for your inbox")      "~~"      }else {"~~"                stdout!("getting voter") |"~~"        @{items.get("peek")}!("vote", $ballot, *ret) |"~~"        for( @{[voter]}  <- ret ) {"~~"                    @voter!("vote",$vote,*stdout,*ret) |"~~"          stdout!(["vote",$ballot,$myusername,"received"]) |"~~"          for (success <- ret ) {"~~"                       @{items.get("peek")}!("vote", $ballot, *ret) |"~~"            stdout!(*success)          "~~"          }}      "~~"      }|"~~"      stdout!(["#define $locker_nonce_" ++ $myusername, {$locker_nonce_%%$myusername + 1}])"~~"    }}"~~"}
#define $locker_nonce_jimscarver 1
#define $locker_jimscarver `rho:id:5agduqn6jmzu8g4kykyi8wguguk48ymo4o6s6a8us5ncg4jz58p8ay`
#define $inbox_jimscarver `rho:id:esiadqwogy4fc8mz3d57yh8qnk7a3x7azikup95583gt1jrg439djg`
#define $locker_Rich `rho:id:9yb3d5mnt338wo9gprz3mobhqzwxojamy8fbpah3gx5b57pyrksxxu`
#define $locker_nonce_Rich 1
#define $inbox_Rich `rho:id:tbb6yxtykoj6ubbeno7n4iqiuzo5615wpddkmq5q31mq41j95xcq8i`
#define $Locker `rho:id:gd1p5rocfdx7nbp9j1rk99hogce4d7qq1y3hcbspeeomwu9ddhaysp`
#define $Inbox `rho:id:uk6bksf3ab9pqnzrf3kqct51316e4fxc3a8kmnjqr4wjf6kd19saep`
#define $Directory `rho:id:1znd5c3bag777q5yffeudw9kaj3k9rjbueadwi5o35r4cc64y8noue`
#define $Community `rho:id:ksitfrd5fedt1a7utqtk8rhjyx7qibxumhsq9j4qs1891furum7sbi`
#define $Ballot `rho:id:357sw8bq39wer3sr81j4d4enu9wai7t9k4b97mddpx53b7er481n5m`
