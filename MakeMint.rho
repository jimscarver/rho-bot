new
  MakeMint, rs(`rho:registry:insertSigned:ed25519`), uriOut,
  rl(`rho:registry:lookup`), NonNegativeNumberCh
in {
  rl!(`rho:id:nd74ztexkao5awjhj95e3octkza7tydwiy7euthnyrt5ihgi9rj495`, *NonNegativeNumberCh) |
  for(@(_, NonNegativeNumber) <- NonNegativeNumberCh) {
    contract MakeMint(return) = {
      new thisMint, internalMakePurse, decr in {
        contract thisMint(@"makePurse", @init, return) = {
          new balanceCh in {
            @NonNegativeNumber!(init, *balanceCh) | for(@balance <- balanceCh) {
              internalMakePurse!(balance, *return)
            }
          }
        } |
        contract internalMakePurse(balance, return) = {
          //balance must be a name that NonNegativeNumber contract is listening on
          new thisPurse in {
            contract thisPurse(@=*decr, @amount, success) = { balance!("sub", amount, *success) } |
            contract thisPurse(@"getBalance", return) = { balance!("value", *return) } |
            contract thisPurse(@"sprout", return) = { thisMint!("makePurse", 0, *return) } |
            contract thisPurse(@"split", @amount, return) = {
              new destPurseCh, successCh in {
                thisPurse!("sprout", *destPurseCh) | for(@destPurse <- destPurseCh) {
                  @destPurse!("deposit", amount, *thisPurse, *successCh) |
                  for(@success <- successCh) {
                    if (success) {
                      return!([destPurse])
                    } else {
                      return!([])
                    }
                  }
                }
              }
            } |
            contract thisPurse(@"deposit", @amount, @src, success) = {
              new result in {
                @src!(*decr, amount, *result) | //call src decr function.
                for(@decrSuccess <- result) {
                  if (decrSuccess) {
                    balance!("add", amount, *success) // add transferred amount to this purse
                  } else {
                    success!(false) 
                  }
                }
              }
            } |
            return!(bundle+{*thisPurse})
          }
        } |
        return!(bundle+{*thisMint})
      }
    }
  } |
  rs!(
    "d9ba2075d355755060205605f4cdbd5ecd3cce5ed1f39690f34772f7c9aa30ab".hexToBytes(), 
    (9223372036854775807, bundle+{*MakeMint}), 
    "36229e3f4530c15f3b7c1d9165369201b70b4673289a003652af14b436b20a275d5909d6dfbbd06e685292d39eadf3af11db6f882dcc78ef0b794e6da0ad6109".hexToBytes(), 
    *uriOut
  ) |
  new $insertArbitrary, $stdout, ret in {
    insertArbitrary!(*MakeMint, *ret) |
    for ( uri <- ret ) {
      stdout!(["#define $MakeMint", *uri])
    }
  }
}
