#define $ballot "calc"
#define $vote "lambda"
new ret, lockerCh, itemsCh, lookup(`rho:registry:lookup`), stdout(`rho:io:stdout`) in { 
  lookup!($locker_%%$myusername, *lockerCh) | for(locker <- lockerCh) { 
    locker!("get", $myprivkey.hexToBytes(), $locker_nonce_%%$myusername, *stdout, *itemsCh) | 
    for (@items  <- itemsCh) { 
      if ( items.get("peek") == Nil ) {
        stdout!("you do not have a peek channel for your inbox")
      } else {
        stdout!("getting voter") |
        @{items.get("peek")}!("vote", $ballot, *ret) |
        for( @{[voter]}  <- ret ) {
          @voter!("vote",$vote,*stdout,*ret) |
          stdout!(["vote",$ballot,$myusername,"received"]) |
          for (success <- ret ) {
           @{items.get("receive")}!("vote", $ballot, *ret) |
           stdout!(*success) 
          }
        }
      } |
      stdout!(["#define $locker_nonce_" ++ $myusername, {$locker_nonce_%%$myusername + 1}])
} } }
